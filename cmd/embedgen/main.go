// Package main provides a tool to generate embed.go files for PIGO8 games
package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	// Parse command line flags
	outputDir := flag.String("dir", ".", "Directory where the embed.go file will be created")
	flag.Parse()

	// Check if map.json and spritesheet.json exist in the current directory
	mapPath := filepath.Join(*outputDir, "map.json")
	spritesheetPath := filepath.Join(*outputDir, "spritesheet.json")

	mapExists := fileExists(mapPath)
	spritesheetExists := fileExists(spritesheetPath)
	
	// Find all audio*.wav files
	audioFiles, err := filepath.Glob(filepath.Join(*outputDir, "audio*.wav"))
	if err != nil {
		fmt.Printf("Error searching for audio files: %v\n", err)
		os.Exit(1)
	}
	
	// If no audio files found with wildcard, try to find them individually
	if len(audioFiles) == 0 {
		// Try specific audio files that might exist
		for i := 1; i <= 10; i++ { // Check for audio1.wav through audio10.wav
			specificFile := filepath.Join(*outputDir, fmt.Sprintf("audio%d.wav", i))
			if fileExists(specificFile) {
				audioFiles = append(audioFiles, specificFile)
			}
		}
	}
	
	// Convert absolute paths to relative paths for embedding
	var audioRelPaths []string
	for _, file := range audioFiles {
		relPath, err := filepath.Rel(*outputDir, file)
		if err != nil {
			fmt.Printf("Error getting relative path for %s: %v\n", file, err)
			continue
		}
		audioRelPaths = append(audioRelPaths, relPath)
	}

	if !mapExists && !spritesheetExists && len(audioFiles) == 0 {
		fmt.Printf("Warning: No resources (map.json, spritesheet.json, or audio*.wav) found in %s\n", *outputDir)
		os.Exit(1)
	}

	// Generate the embed.go file
	content := `// Code generated by PIGO8 embedgen; DO NOT EDIT.

package main

import (
	"embed"
	"log"
	
	p8 "github.com/drpaneas/pigo8"
)

// Embed the game-specific resources
//
`
	// Only include files that exist
	embedDirective := "//go:embed"
	if mapExists {
		embedDirective += " map.json"
	}
	if spritesheetExists {
		// Always add a space before the filename
		embedDirective += " spritesheet.json"
	}
	// Add all audio files
	for _, audioFile := range audioRelPaths {
		embedDirective += " " + audioFile
	}
	content += embedDirective + "\n"
	content += `var resources embed.FS

func init() {
	// Register the embedded resources with PIGO8
	p8.RegisterEmbeddedResources(resources, `

	// Add the correct paths based on what exists
	content += `"`
	if spritesheetExists {
		content += "spritesheet.json"
	}
	content += `", "`
	if mapExists {
		content += "map.json"
	}
	content += `"`
	
	// Add audio files as variadic arguments
	if len(audioRelPaths) > 0 {
		content += `, `
		for i, audioFile := range audioRelPaths {
			if i > 0 {
				content += `, `
			}
			content += `"` + audioFile + `"`
		}
	}
	
	content += `)`

	content += `
	
	// Initialize audio player if audio files are present
	if p8.GetAudioPlayer() != nil {
		log.Println("Audio system initialized")
	}
}
`
	// Write the file
	outputPath := filepath.Join(*outputDir, "embed.go")
	err = os.WriteFile(outputPath, []byte(content), 0644)
	if err != nil {
		fmt.Printf("Error generating embed.go: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Generated embed.go for PIGO8 resources in %s\n", *outputDir)
}

func fileExists(filename string) bool {
	_, err := os.Stat(filename)
	return err == nil
}
